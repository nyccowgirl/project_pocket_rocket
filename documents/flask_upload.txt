
--------------------------------------------------

FLASK UPLOAD SETUP NOTES

--------------------------------------------------

1) prerequisites

>>> git checkout -b add_file_upload
>>> git branch
* add_file_upload
  master


2) install flask-upload in virtual environment

>>> pip install flask-uploads
>>> pip freeze > requirements.txt


3) add configuration parameters to .../instance/flask.cfg

# Uploads
UPLOADS_DEFAULT_DEST = TOP_LEVEL_DIR + '/project/static/img/'
UPLOADS_DEFAULT_URL = 'http://localhost:5000/static/img/'

UPLOADED_IMAGES_DEST = TOP_LEVEL_DIR + '/project/static/img/'
UPLOADED_IMAGES_URL = 'http://localhost:5000/static/img/'

Note: instance folder is not saved to git repository because of sensitive info


4) update the â€¦/project/[static/img/]__init__.py to configure flask-uploads module

Note: each parent directory would also need to be updated with __init__.py


5) import and config server.py

#################
#### imports ####
#################

from flask import Flask, render_template
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager
from flask_bcrypt import Bcrypt
from flask_mail import Mail
from flask_uploads import UploadSet, IMAGES, configure_uploads


################
#### config ####
################

app = Flask(__name__, instance_relative_config=True)
app.config.from_pyfile('flask.cfg')

db = SQLAlchemy(app)
bcrypt = Bcrypt(app)
mail = Mail(app)

login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = 'users.login'

# Configure the image uploading via Flask-Uploads
images = UploadSet('images', IMAGES) # images can be named any variable - just
                                     # be consistent with naming convention
app.config['UPLOADED_IMAGES_DEST'] = 'static/img'
configure_uploads(app, images)


6) select image to upload

  a) update database (model.py)

     class User(db.Model):

     user_pic = db.Column(db.String(100), nullable=True)

  b) update template

     - update enctype of form

     <form action='/' method='POST' enctype='multipart/form-data'>
        <input type='file'>

  c) in @app.route function

     if request.method == 'POST' and 'photo' in request.files:
        # 'photo' is 'name' parameter from html form

        filename = images.save(request.files['photo']) # same as above
        pic = images.url(filename) # converts image to url to instantiate

        user = User(user_pic=pic)

        db.session.add(user)
        db.session.commit()


--------------------------------------------------

